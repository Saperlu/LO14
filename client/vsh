#!/bin/bash
regexServeur="^[[:alnum:].:]+$"
regexPort="^[[:digit:]]+$"
regexNomArchive="^[[:alnum:]._-]+$"

__colorRed="\e[31m"
__colorEnd="\e[0m"

FIFO="/tmp/fifo-$$-client"
function nettoyage() { rm -f "$FIFO"; }
trap nettoyage EXIT
[ -e "$FIFO" ] || mkfifo "$FIFO"

function printResult () {
    #1
    local i=0
    local n=1
    [[ "$1" == "--debug" ]] && local mode="debug"
    local line="" 
    while [[ ("$mode" == "debug" && "$line" != "DEBUGEND") || ("$mode" != "debug" && $i -ne $n) ]]
    do
        while read -r line
        do
            if [[ "$mode" != "debug" && $i -eq 0 ]]
            then
                n=$line
            else
                printf "%s\n" "$line"
            fi
            if [[ ("$mode" != "debug" && $i -eq $n) || ("$mode" == "debug" && "$line" =~ "DEBUGEND") ]]
            then
                kill $!
                break
            fi
            ((i++))
        done < "$FIFO"
    done
}

function wcl () {
    wc -l "$1" | grep -E -o '[0-9]+' | head -n 1
}

function list () {
    serveur=$1
    port=$2
    echo list | netcat "$serveur" "$port" > "$FIFO" &
    printResult
    exit 0
}

function create () {
    serveur=$1
    port=$2
    archive=$3
    local header body dossier relative absolute temp
    header="/tmp/header-$USER-$$-$archive"
    body="/tmp/body-$USER-$$-$archive"
    temp="/tmp/temp-$USER-$$-$archive"
    dossier="$(pwd)"
    
    local toprint

    #Deux fichiers qu'on va concaténer à la fin
    touch "$header.txt"
    touch "$body.txt"

    #On laisse une ligne en haut pour noter le début du header et du body
    echo -e "\n" >> "$header.txt"

    # On recherche tous les dossiers de l'arborescence pour lister leur contenu
    find ./ -type d | while read -r absolute
    do
        relative=$(printf "%s" "$absolute" | sed "s:^\\./::")
        echo "directory $relative\\" >> "$header.txt"
        # On boucle sur le contenu du dossier pour afficher les informations de chaque fichier/dossier
        ls -l "$absolute" | sed /^total/d | while read -r rights _ _ _ size _ _ _ name
        do
            toprint="$name $rights"
            if [[ "$size" != "0" ]]
            then
                toprint="$toprint $size"
                if [[ -f "$absolute/$name" ]]
                then
                    toprint="$toprint $((($(wcl "$body.txt")+1))) $(wcl $absolute/$name)"
                    cat "$absolute/$name" >> "$body.txt"
                fi
            fi
            echo "$toprint"
        done >> "$header.txt"
        echo "@" >> "$header.txt"
    done
    taille_header=$(wcl "$header.txt")
    #Ajouter au début du fichier header

    echo "3:$(((taille_header+2)))" | cat - "$header.txt" > "$temp" 
    mv "$temp" "$header.txt"

    #Concaténer header et body
    sed -i '' 's/\//\\/g' "$header.txt"
    cat "$header.txt" "$body.txt" > "$temp"
    rm "$body.txt"
    rm "$header.txt"

    local archiveContent
    archiveContent=$(base64 $temp)
    echo $archiveContent
    echo "create $archive $archiveContent" | netcat "$serveur" "$port" > "$FIFO" &
    rm "$temp"
    printResult
}

function browse-ls () {
    local serveur port archive currentDir destDir

    serveur=$1
    port=$2
    archive=$3
    currentDir=$4

    local opt opt_detailled opt_all
    shift 4
    while [[ "$1" =~ ^- ]]
    do 
        [[ "$1" =~ a ]] && opt_all=1
        [[ "$1" =~ l ]] && opt_detailled=1
        shift
    done
    opt="-"
    [[ $opt_detailled == 1 ]] && opt+=l
    [[ $opt_all == 1 ]] && opt+=a
    destDir="$1"
    [[ -z "$destDir" ]] && destDir="."

    echo "browse ls $archive $currentDir $destDir $opt" | netcat "$serveur" "$port" > "$FIFO" &
    printResult | while read -r line
    do
        read -r rights name size <<< "$line"
        if [[ "$rights" =~ ^d ]]
        then
            printf "%s $__colorRed%s$__colorEnd %s\n" "$rights" "$name" "$size"
        else
            echo "$line"
        fi
    done
}

function browse-cd () {
    serveur=$1
    port=$2
    archive=$3
    currentDir=$4
    destDir=$5
    
    echo "browse cd $archive $currentDir $destDir" | netcat "$serveur" "$port" > "$FIFO" &
    local result
    result=$(printResult)
    if [[ "$result" =~ ^\\ ]]
    then
        currentDir="$result"
        echo $currentDir
    else
        echo "$result"
    fi

}

function browse-cat () {
    serveur=$1
    port=$2
    archive=$3
    currentDir=$4
    fichier=$5
    
    echo "browse cat $archive $currentDir $fichier" | netcat "$serveur" "$port" > "$FIFO" &
    printResult
}

function browse-rm () {
    serveur=$1
    port=$2
    archive=$3
    currentDir=$4
    fichier=$5
    
    echo "browse rm $archive $currentDir $fichier" | netcat "$serveur" "$port" > "$FIFO" &
    printResult
}

function browse-touch () {
    serveur=$1
    port=$2
    archive=$3
    currentDir=$4
    fichier=$5
    
    echo "browse touch $archive $currentDir $fichier" | netcat "$serveur" "$port" > "$FIFO" &
    printResult
}

function browse-mkdir () {
    serveur=$1
    port=$2
    archive=$3
    currentDir=$4
    dossier=$5
    
    echo "browse mkdir $archive $currentDir $dossier" | netcat "$serveur" "$port" > "$FIFO" &
    printResult
}

function extract () {
    serveur=$1
    port=$2
    archive=$3
    echo "extract $archive" | netcat "$serveur" "$port" > "$FIFO" &
    file="archive.txt"
    printResult > "$file"

    if [[ ! ($(head -n 1 "$file") =~ ^[0-9]+:[0-9]+$) ]]
    then
        cat "$file"
        rm "$file"
        exit 0
    fi

    # On crée les fichiers header.txt et body.txt
    read line < "$file"
    beginHeader=$(echo $line | cut -d: -f1)
    beginBody=$(echo $line | cut -d: -f2)
    head -n $((beginBody-1)) "$file" | tail -n $((beginBody-beginHeader-1)) | sed 's/\\/\//g' > header.txt
    awk "NR>=$beginBody { print \$0 >> \"body.txt\" }" $file

    isInsideDirectory="false"
    directory=''
    while read -r line
    do
        if [[ $isInsideDirectory == "false" && "$line" =~ ^directory ]]
        then
            [[ $line != "directory" ]] && directory=$(echo $line | cut -d' ' -f2)
            isInsideDirectory="true"
            absolute="$PWD/$directory"
            absolute=${absolute//"//"/"/"}
            if [[ ! -d "$absolute" ]]
            then
                mkdir "$absolute"
                chmod u="$(echo $rights | cut -c2-4 | sed s/-//g)",g="$(echo $rights | cut -c5-7 | sed s/-//g)",o="$(echo $rights | cut -c8-10 | sed s/-//g)" "$absolute"
            fi
        elif [[ $isInsideDirectory == "true" && "$line" == "@" ]]
        then
            directory=''
            isInsideDirectory="false"
        else
            read -r name rights size begin lines <<< $line
            absolute="$PWD/$directory/$name"
            absolute=${absolute//"//"/"/"}
            if [[ ! ($rights =~ ^d) ]]
            then
                touch "$absolute"
                if [[ -n $size ]]
                then
                    head -n $((begin+lines-1)) "body.txt" | tail -n "$lines" > "$absolute"
                fi
                chmod u=$(echo $rights | cut -c2-4 | sed s/-//g),g=$(echo $rights | cut -c5-7 | sed s/-//g),o=$(echo $rights | cut -c8-10 | sed s/-//g) "$absolute"
            fi
        fi
    done < header.txt
    rm body.txt header.txt $file
    echo "L'archive a été restaurée dans le répertoire courant."
    exit 0
}

if [[ 
    $# -eq 3 
    && "$1" == "-list" 
    && "$2" =~ $regexServeur 
    && "$3" =~ $regexPort
]]
then # list
    list "$2" "$3" "$4" 2>/dev/null
elif [[ 
    $# -eq 4
    && "$1" == "-create"
    && "$2" =~ $regexServeur 
    && "$3" =~ $regexPort
    && "$4" =~ $regexNomArchive
]]
then # create
    create "$2" "$3" "$4" 2>/dev/null
elif [[ 
    $# -eq 4
    && "$1" == "-browse"
    && "$2" =~ $regexServeur
    && "$3" =~ $regexPort
    && "$4" =~ $regexNomArchive
]]
then # browse
    serveur=$2
    port=$3
    archive=$4
    currentDir="\\"
    regexFichier="[[:alnum:]\\-_.]+"

    # Vérifie que l'archive existe
    if [[ ! $(list $serveur $port 2>/dev/null | egrep ^$archive$) ]]
    then
        echo "Erreur : l'archive n'existe pas"
        exit 0
    fi

    printf "vsh: %s < $__colorRed%s$__colorEnd > " "$archive" "$currentDir"
    read -r line
    while [[ $line != "exit" ]]
    do
        if [[ $line == "pwd" ]]
        then
            echo $currentDir
        elif [[ $line =~ ^ls(\ -[la]+)*(\ $regexFichier)?$ ]]
        then
            options=$(echo "$line" | sed -r 's/^ls ?//g')
            browse-ls "$2" "$3" "$4" "$currentDir" $options 2>/dev/null
        elif [[ $line =~ ^cd\ $regexFichier$ ]]
        then
            dossier="$(echo "$line" | sed 's/^cd //g')"
            browse-cd "$2" "$3" "$4" "$currentDir" "$dossier" 2>/dev/null

        elif [[ $line =~ ^cat(\ $regexFichier)+$ ]]
        then
            fichiers=$(echo "$line" | sed 's/^cat //g')
            browse-cat "$2" "$3" "$4" "$currentDir" "$fichiers" 2>/dev/null
        elif [[ $line =~ ^rm\ $regexFichier$ ]]
        then
            fichier=$(echo "$line" | sed 's/^rm //g')
            browse-rm "$2" "$3" "$4" "$currentDir" "$fichier" 2>/dev/null
        elif [[ $line =~ ^touch\ $regexFichier$ ]]
        then
            fichier=$(echo "$line" | sed 's/^touch //g')
            browse-touch "$2" "$3" "$4" "$currentDir" "$fichier" 2>/dev/null
        elif [[ $line =~ ^mkdir\ $regexFichier$ ]]
        then
            dossier=$(echo "$line" | sed 's/mkdir //g')
            browse-mkdir "$2" "$3" "$4" "$currentDir" "$dossier" 2>/dev/null
        else
            # prints correct usage
            printf "Usage :\n\tpwd\n\tls[ -la][ dossier]\n\tcd dossier\n\tcat fichier[ autres_fichiers]\n\trm fichier\n\ttouch fichier\n\tmkdir dossier\n"
        fi
        printf "vsh: %s < $__colorRed%s$__colorEnd > " "$archive" "$currentDir"
        read -r line
    done

elif [[ 
    $# -eq 4
    && "$1" == "-extract"
    && "$2" =~ $regexServeur
    && "$3" =~ $regexPort
    && "$4" =~ $regexNomArchive
]]
then # extract
    extract "$2" "$3" "$4"
else
    cat << EOF
Usage :
    vsh -list    nom_serveur port
    vsh -create  nom_serveur port nom_archive
    vsh -browse  nom_serveur port nom_archive
    vsh -extract nom_serveur port nom_archive
EOF
fi

